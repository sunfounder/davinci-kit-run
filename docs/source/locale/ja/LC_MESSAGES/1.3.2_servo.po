# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 18:20+0800\n"
"PO-Revision-Date: 2021-05-27 19:02+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.3\n"

#: ../1.3.2_servo.rst:2
msgid "1.3.2 Servo"
msgstr "1.3.2 サーボ"

#: ../1.3.2_servo.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../1.3.2_servo.rst:7
msgid "In this lesson, we will learn how to make the servo rotate."
msgstr "このレッスンでは、サーボを回転させる方法を学ぶ。"

#: ../1.3.2_servo.rst:10
msgid "Components"
msgstr "部品"

#: ../1.3.2_servo.rst:16
msgid "Principle"
msgstr "原理"

#: ../1.3.2_servo.rst:18
msgid "**Servo**"
msgstr "**サーボ**"

#: ../1.3.2_servo.rst:20
msgid ""
"A servo is generally composed of the following parts: case, shaft, gear "
"system, potentiometer, DC motor, and embedded board."
msgstr ""
"サーボは一般に、ケース、シャフト、ギアシステム、ポテンショメーター、DCモー"
"ター、および内蔵式ボードで構成されている。"

#: ../1.3.2_servo.rst:26
msgid ""
"It works like this: The microcontroller sends out PWM signals to the servo, "
"and then the embedded board in the servo receives the signals through the "
"signal pin and controls the motor inside to turn. As a result, the motor "
"drives the gear system and then motivates the shaft after deceleration. The "
"shaft and potentiometer of the servo are connected together. When the shaft "
"rotates, it drives the potentiometer, so the potentiometer outputs a voltage "
"signal to the embedded board. Then the board determines the direction and "
"speed of rotation based on the current position, so it can stop exactly at "
"the right position as defined and hold there."
msgstr ""
"これは次のように動作する：マイクロコントローラーはPWM信号をサーボに送信し、"
"サーボの内蔵式ボードは信号ピンを介して信号を受信し、内部のモーターを制御して"
"回転させる。その結果、モーターはギアシステムを駆動し、減速後にシャフトを駆動"
"する。サーボのシャフトとポテンショメーターは接続されている。シャフトが回転す"
"る時、ポテンショメーターが駆動されるため、ポテンショメーターは電圧信号を内蔵"
"式ボードに出力する。その後、ボードは現在の位置に基づいて回転の方向と速度を決"
"めるため、定義された位置で正確に停止してそのまま保持する。"

#: ../1.3.2_servo.rst:40
msgid ""
"The angle is determined by the duration of a pulse that is applied to the "
"control wire. This is called Pulse width Modulation. The servo expects to "
"see a pulse every 20 ms. The length of the pulse will determine how far the "
"motor turns. For example, a 1.5ms pulse will make the motor turn to the 90 "
"degree position (neutral position)."
msgstr ""
"角度は制御ワイヤに適用されるパルスの持続時間によって決まる。これはパルス幅変"
"調と呼ばれる。サーボは20ミリ秒ごとに1パルスを期待している。パルスの長さによ"
"り、モーターの回転距離が決まる。たとえば、1.5msパルスは、モーターを90度の位置"
"（ニュートラル位置）に回転させる。"

#: ../1.3.2_servo.rst:46
msgid ""
"When a pulse is sent to a servo that is less than 1.5 ms, the servo rotates "
"to a position and holds its output shaft some number of degrees "
"counterclockwise from the neutral point. When the pulse is wider than 1.5 ms "
"the opposite occurs. The minimal width and the maximum width of pulse that "
"will command the servo to turn to a valid position are functions of each "
"servo. Generally the minimum pulse will be about 0.5 ms wide and the maximum "
"pulse will be 2.5 ms wide."
msgstr ""
"1.5 ms未満のパルスがサーボに送信されると、サーボはある位置まで回転し、出力軸"
"をニュートラル位置から反時計回りにある程度保持する。パルスが1.5ミリ秒を上回る"
"場合、逆のことが起こる。有効な位置にサーボを回転させるように命令するパルスの"
"最小幅と最大幅は、各サーボの機能である。通常、パルスの最小幅は約0.5 msで、最"
"大幅は2.5 msである。"

#: ../1.3.2_servo.rst:58
msgid "Schematic Diagram"
msgstr "回路図"

#: ../1.3.2_servo.rst:64
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../1.3.2_servo.rst:66
msgid "**Step 1:** Build the circuit."
msgstr "**ステップ1：**回路を作る。"

#: ../1.3.2_servo.rst:72
msgid "For C Language Users"
msgstr "C言語ユーザー向け"

#: ../1.3.2_servo.rst:74 ../1.3.2_servo.rst:186
msgid "**Step 2**: Go to the folder of the code."
msgstr "**ステップ2：**コードのフォルダーに入る。"

#: ../1.3.2_servo.rst:80
msgid "**Step 3**: Compile the code."
msgstr "**ステップ3：**コードをコンパイルする。"

#: ../1.3.2_servo.rst:86
msgid "**Step 4**: Run the executable file."
msgstr "**ステップ4：**EXEファイルを実行する。"

#: ../1.3.2_servo.rst:92 ../1.3.2_servo.rst:198
msgid ""
"After the program is executed, the servo will rotate from 0 degrees to 180 "
"degrees, and then from 180 degrees to 0 degrees, circularly."
msgstr ""
"プログラムが実行されると、サーボは0度から180度まで回転し、それから180度から0"
"度まで循環的に回転する。"

#: ../1.3.2_servo.rst:95 ../1.3.2_servo.rst:201
msgid "**Code**"
msgstr "**コード**"

#: ../1.3.2_servo.rst:136 ../1.3.2_servo.rst:250
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../1.3.2_servo.rst:144
msgid "Create a Map() function to map value in the following code."
msgstr "次のコードで値をマップするMap（）関数を作成する。"

#: ../1.3.2_servo.rst:156
msgid "Create a funtion, setAngle() to write angle to the servo."
msgstr "角度をサーボに書き込むために、関数setAngle（）を作成する。"

#: ../1.3.2_servo.rst:162
msgid "This function can change the duty cycle of the PWM."
msgstr "この関数はPWMのデューティサイクルを変更できる。"

#: ../1.3.2_servo.rst:164
msgid ""
"To make the servo rotate to 0 ~ 180 °, the pulse width should change within "
"the range of 0.5ms ~ 2.5ms when the period is 20ms; in the function, "
"softPwmCreate(), we have set that the period is 200x100us=20ms, thus we need "
"to map 0 ~ 180 to 5x100us ~ 25x100us."
msgstr ""
"サーボを0〜180°に回転させるために、周期が20msのときにパルス幅を0.5ms〜2.5msの"
"範囲内で変更してください。関数softPwmCreate（）では、周期が200x100us = 20msに"
"設定されているため、0〜180を5x100us〜25x100usにマッピングする必要がある。"

#: ../1.3.2_servo.rst:169
msgid "The prototype of this function is shown below."
msgstr "この関数のプロトタイプを以下に示す。"

#: ../1.3.2_servo.rst:176
msgid "**Parameter pin:** Any GPIO pin of Raspberry Pi can be set as PWM pin."
msgstr ""
"**パラメーターピン：**Raspberry PiのGPIOピンはPWMピンとして設定できる。"

#: ../1.3.2_servo.rst:178
msgid ""
"**Parameter initialValue:** The initial pulse width is that initialValue "
"times 100us."
msgstr ""
"**パラメータinitialValue：**初期パルス幅は、initialValueに100usを掛けたもので"
"ある。"

#: ../1.3.2_servo.rst:181
msgid "**Parameter pwmRange:** the period of PWM is that pwmRange times 100us."
msgstr ""
"**パラメーターpwmRange：**PWMの周期は、pwmRangeに100usを掛けたものである。"

#: ../1.3.2_servo.rst:184
msgid "For Python Language Users"
msgstr "Python言語ユーザー向け"

#: ../1.3.2_servo.rst:192
msgid "**Step 3**: Run the executable file."
msgstr "**ステップ3：**EXEファイルを実行する。"

#: ../1.3.2_servo.rst:257
msgid ""
"Set the servoPin to PWM pin, then the frequency to 50hz, and the period to "
"20ms."
msgstr "servoPinをPWMピンに設定し、次に周波数を50hzに、周期を20msに設定する。"

#: ../1.3.2_servo.rst:259
msgid "p.start(0): Run the PWM function，and set the initial value to 0."
msgstr "p.start（0）：PWM関数を実行し、初期値を0に設定する。"

#: ../1.3.2_servo.rst:269
msgid ""
"Create a function, setAngle() to write angle that ranges from 0 to 180 into "
"the servo."
msgstr "関数setAngle（）を作成して、0〜180の範囲の角度をサーボに書き込む。"

#: ../1.3.2_servo.rst:275
msgid "This code is used to limit the angle within the range 0-180°."
msgstr "このコードは角度を0〜180°の範囲に制限するために使用される。"

#: ../1.3.2_servo.rst:277
msgid ""
"The min() function returns the minimum of the input values. If 180<angle, "
"then return 180,if not, return angle."
msgstr ""
"min（）関数は入力値の最小値を返す。角度が180以下の場合、180を返す。そうではな"
"い場合、角度を返す。"

#: ../1.3.2_servo.rst:280
msgid ""
"The max() method returns the maximum element in an iterable or largest of "
"two or more parameters. If 0>angle, then return 0, if not, return angle."
msgstr ""
"max（）メソッドは、反復可能または最大の2つ以上のパラメーターで最大要素を返"
"す。角度が0以上の場合は0を返し、そうでない場合は角度を返す。"

#: ../1.3.2_servo.rst:289
msgid ""
"To render a range 0 ~ 180 ° to the servo, the pulse width of the servo is "
"set to 0.5ms(500us)-2.5ms(2500us)."
msgstr ""
"0〜180°の範囲をサーボにレンダリングすると、サーボのパルス幅は0.5ms（500us）〜"
"2.5ms（2500us）に設定される。"

#: ../1.3.2_servo.rst:292
msgid ""
"The period of PWM is 20ms(20000us), thus the duty cycle of PWM is "
"(500/20000)%-(2500/20000)%, and the range 0 ~ 180 is mapped to 2.5 ~ 12.5."
msgstr ""
"PWMの周期は20ms（20000us）であるため、PWMのデューティサイクルは"
"（500/20000）％-（2500/20000）％であり、0〜180の範囲は2.5〜12.5にマッピングさ"
"れる。"

#: ../1.3.2_servo.rst:298
msgid "Phenomenon Picture"
msgstr "現象画像"
