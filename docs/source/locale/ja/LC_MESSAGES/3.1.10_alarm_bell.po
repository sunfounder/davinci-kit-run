# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 18:20+0800\n"
"PO-Revision-Date: 2021-05-28 15:36+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.3\n"
"Language: ja\n"

#: ../3.1.10_alarm_bell.rst:2
msgid "3.1.10 Alarm Bell"
msgstr "3.1.10 警報ベル"

#: ../3.1.10_alarm_bell.rst:5
msgid "**Introduction**"
msgstr "**前書き**"

#: ../3.1.10_alarm_bell.rst:7
msgid ""
"In this course, we will make a manual alarm device. You can replace the "
"toggle switch with a thermistor or a photosensitive sensor to make a "
"temperature alarm or a light alarm."
msgstr ""
"このコースでは、手動警報装置を作成する。トグルスイッチをサーミスタまたは感光"
"センサーに交換して、温度警報または光警報を作成できる。"

#: ../3.1.10_alarm_bell.rst:12
msgid "**Components**"
msgstr "**部品**"

#: ../3.1.10_alarm_bell.rst:18
msgid "**Schematic Diagram**"
msgstr "**回路図**"

#: ../3.1.10_alarm_bell.rst:21
msgid "T-Board Name"
msgstr "Tボード名"

#: ../3.1.10_alarm_bell.rst:21
msgid "physical"
msgstr "physical"

#: ../3.1.10_alarm_bell.rst:21
msgid "wiringPi"
msgstr "wiringPi"

#: ../3.1.10_alarm_bell.rst:21
msgid "BCM"
msgstr "BCM"

#: ../3.1.10_alarm_bell.rst:22
msgid "GPIO17"
msgstr "GPIO17"

#: ../3.1.10_alarm_bell.rst:22
msgid "Pin 11"
msgstr "Pin 11"

#: ../3.1.10_alarm_bell.rst:22
msgid "0"
msgstr "0"

#: ../3.1.10_alarm_bell.rst:22
msgid "17"
msgstr "17"

#: ../3.1.10_alarm_bell.rst:23
msgid "GPIO18"
msgstr "GPIO18"

#: ../3.1.10_alarm_bell.rst:23
msgid "Pin 12"
msgstr "Pin 12"

#: ../3.1.10_alarm_bell.rst:23
msgid "1"
msgstr "1"

#: ../3.1.10_alarm_bell.rst:23
msgid "18"
msgstr "18"

#: ../3.1.10_alarm_bell.rst:24
msgid "GPIO27"
msgstr "GPIO27"

#: ../3.1.10_alarm_bell.rst:24
msgid "Pin 13"
msgstr "Pin 13"

#: ../3.1.10_alarm_bell.rst:24
msgid "2"
msgstr "2"

#: ../3.1.10_alarm_bell.rst:24
msgid "27"
msgstr "27"

#: ../3.1.10_alarm_bell.rst:25
msgid "GPIO22"
msgstr "GPIO22"

#: ../3.1.10_alarm_bell.rst:25
msgid "Pin 15"
msgstr "Pin 15"

#: ../3.1.10_alarm_bell.rst:25
msgid "3"
msgstr "3"

#: ../3.1.10_alarm_bell.rst:25
msgid "22"
msgstr "22"

#: ../3.1.10_alarm_bell.rst:32
msgid "**Experimental Procedures**"
msgstr "**実験手順**"

#: ../3.1.10_alarm_bell.rst:34
msgid "**Step 1**: Build the circuit."
msgstr "**ステップ1：**回路を作る。"

msgid "Alarm Bell_bb"
msgstr "Alarm Bell_bb"

#: ../3.1.10_alarm_bell.rst:42
msgid "**For C Language Users**"
msgstr "**C言語ユーザー向け**"

#: ../3.1.10_alarm_bell.rst:44
msgid "**Step 2**: Change directory."
msgstr "**ステップ2：**ディレクトリを変更する。"

#: ../3.1.10_alarm_bell.rst:50
msgid "**Step 3**: Compile."
msgstr "**ステップ3：**コンパイルする。"

#: ../3.1.10_alarm_bell.rst:56
msgid "**Step 4**: Run."
msgstr "**ステップ4：**実行。"

#: ../3.1.10_alarm_bell.rst:62 ../3.1.10_alarm_bell.rst:215
msgid ""
"After the program starts, the toggle switch will be toggled to the right, "
"and the buzzer will give out alarm sounds. At the same time, the red and "
"green LEDs will flash at a certain frequency."
msgstr ""
"プログラムが起動すると、トグルスイッチが右に切り替わり、ブザーが警報音を出"
"す。同時に、特定の周波数で赤と緑のLEDが点滅する。"

#: ../3.1.10_alarm_bell.rst:66 ../3.1.10_alarm_bell.rst:219
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../3.1.10_alarm_bell.rst:72
msgid ""
"In this code, you'll use a new library, pthread.h, which is a set of common "
"thread libraries and can realize multithreading. We add the **-lpthread** "
"parameter at compile time for the independent working of the LED and the "
"buzzer."
msgstr ""
"このコードでは、新しいライブラリpthread.hを使用する。これは、一般的なスレッ"
"ドライブラリのセットであり、マルチスレッドを実現できる。コンパイル時に**-"
"lpthread**パラメーターを追加して、LEDとブザーを独立して動作させる。"

#: ../3.1.10_alarm_bell.rst:94 ../3.1.10_alarm_bell.rst:241
msgid ""
"The function ledWork() helps to set the working state of these 2 LEDs: it "
"keeps the green LED lighting up for 0.5s and then turns off; similarly, "
"keeps the red LED lighting up for 0.5s and then turns off."
msgstr ""
"関数ledWork（）は、これら2つのLEDの動作状態を設定するために役立つ：緑色のLED"
"を0.5秒間点灯させた後、消灯する。同様に、赤いLEDを0.5秒間点灯させてから消灯"
"する。"

#: ../3.1.10_alarm_bell.rst:115 ../3.1.10_alarm_bell.rst:257
msgid ""
"The function buzzWork() is used to set the working state of the buzzer. "
"Here we set the frequency as between 130 and 800, to accumulate or decay at "
"an interval of 20."
msgstr ""
"関数buzzWork（）は、ブザーの動作状態を設定するために使用される。ここでは、周"
"波数を130〜800に設定し、20の間隔で累積・減衰する。"

#: ../3.1.10_alarm_bell.rst:133 ../3.1.10_alarm_bell.rst:272
msgid "In the function on():"
msgstr "関数on（）で："

#: ../3.1.10_alarm_bell.rst:135 ../3.1.10_alarm_bell.rst:274
msgid "Define the mark “flag=1”, indicating the ending of the control thread."
msgstr "制御スレッドの終了を示すマーク「flag = 1」を定義する。"

#: ../3.1.10_alarm_bell.rst:138
msgid "Create a software-controlled tone pin **BeepPin**."
msgstr "ソフトウェア制御のトーンピン**BeepPin**を作成する。"

#: ../3.1.10_alarm_bell.rst:140
msgid ""
"Create two separate threads so that the LED and the buzzer can work at the "
"same time."
msgstr "LEDとブザーが同時に動作できるように、二つの個別のスレッドを作成する。"

#: ../3.1.10_alarm_bell.rst:143
msgid "**pthread_t tLed:** Declare a thread **tLed**."
msgstr "**pthread_t tLed：**スレッド**tLed**を宣言する。"

#: ../3.1.10_alarm_bell.rst:145
msgid ""
"**pthread_create(&tLed,NULL,ledWork,NULL)：**\\ Create the thread and its "
"prototype is as follows:"
msgstr ""
"**pthread_create（＆tLed、NULL、ledWork、NULL）：**\\スレッドを作成し、その"
"プロトタイプは次の通りである："

#: ../3.1.10_alarm_bell.rst:148
msgid ""
"int pthread_create(pthread_t \\*restrict tidp,const pthread_attr_t "
"\\*restrict_attr,void*（*start_rtn)(void*),void \\*restrict arg);"
msgstr ""
"int pthread_create(pthread_t \\*restrict tidp,const pthread_attr_t "
"\\*restrict_attr,void*（*start_rtn)(void*),void \\*restrict arg);"

#: ../3.1.10_alarm_bell.rst:151
msgid "**Return the Value**"
msgstr "**値を返す**"

#: ../3.1.10_alarm_bell.rst:153
msgid ""
"If successful, return “\\ **0**\\ ”；otherwise, return the **fall number** "
"“\\ **-1**\\ ”."
msgstr ""
"成功した場合は「**0**」を返し、それ以外の場合は落下数「**-1**」を返します。"

#: ../3.1.10_alarm_bell.rst:156
msgid "**Parameter**"
msgstr "**パラメータ**"

#: ../3.1.10_alarm_bell.rst:158
msgid "The first parameter is a pointer to the thread identifier."
msgstr "最初のパラメーターは、スレッドIDへのポインターです。"

#: ../3.1.10_alarm_bell.rst:159
msgid "The second one is used to set the thread attribute."
msgstr "2つ目は、スレッド属性を設定するために使用されます。"

#: ../3.1.10_alarm_bell.rst:160
msgid "The third one is the starting address of the thread running function."
msgstr "3番目は、スレッド実行関数の開始アドレスです。"

#: ../3.1.10_alarm_bell.rst:161
msgid "The last one is the one that runs the function."
msgstr "最後のものは、関数を実行するものです。"

#: ../3.1.10_alarm_bell.rst:173 ../3.1.10_alarm_bell.rst:303
msgid ""
"The function Off() defines “flag=0” so as to exit the threads **ledWork** "
"and **BuzzWork** and then turn off the buzzer and the LED."
msgstr ""
"スレッド**ledWork**と**BuzzWork**を終了するために、関数Off（）は「flag = 0」"
"を定義しそして、ブザーとLEDをオフにする。"

#: ../3.1.10_alarm_bell.rst:194 ../3.1.10_alarm_bell.rst:318
msgid ""
"Main() contains the whole process of the program: firstly read the value of "
"the slide switch; if the toggle switch is toggled to the right (the reading "
"is 1), the function on() is called, the buzzer is driven to emit sounds and "
"the the red and the green LEDs blink. Otherwise, the buzzer and the LED "
"don’t work."
msgstr ""
"Main（）には、プログラムのプロセス全体が含まれている：まず、スライドスイッチ"
"の値を読み取る。トグルスイッチが右に切り替えられた場合（読み取り値が1）、関"
"数on（）が呼び出され、ブザーが駆動されて音が鳴り、赤と緑のLEDが点滅する。そ"
"うしないと、ブザーとLEDが機能しない。"

#: ../3.1.10_alarm_bell.rst:201
msgid "**For Python Language Users**"
msgstr "**Python言語ユーザー向け**"

#: ../3.1.10_alarm_bell.rst:203
msgid "**Step 2:** Change directory."
msgstr "**ステップ2：**ディレクトリを変更する。"

#: ../3.1.10_alarm_bell.rst:209
msgid "**Step 3:** Run."
msgstr "**ステップ3：**実行する。"

#: ../3.1.10_alarm_bell.rst:225
msgid ""
"Here, we import the **Threading** module and it allows you to do multiple "
"things at once, while normal programs can only execute code from top to "
"bottom. With **Threading** modules, the LED and the buzzer can work "
"separately."
msgstr ""
"ここでは、**Threading*8モジュールをインポートし、複数のことを一度に行えるよ"
"うにするが、通常のプログラムはコードを上から下にしか実行できない。"
"**Threading**モジュールを使用すると、LEDとブザーを個別に動作させることができ"
"る。"

#: ../3.1.10_alarm_bell.rst:277
msgid "Start the Buzz, and set the duty cycle to 50%."
msgstr "バズを開始し、デューティサイクルを50％に設定する。"

#: ../3.1.10_alarm_bell.rst:279
msgid ""
"Create **2** separate threads so that the LED and the buzzer can work at "
"the same time."
msgstr ""
"LEDとブザ**ー**が同時に動作できるように、二つの個別のスレッドを作成する。"

#: ../3.1.10_alarm_bell.rst:282
msgid ""
"tBuzz = threading.Thread(target=buzzerWork)\\ **：**\\ Create the thread "
"and its prototype is as follows:"
msgstr ""
"tBuzz = threading.Thread（target = buzzerWork）\\**：**\\スレッドを作成する"
"と、そのプロトタイプは以下の通りである："

#: ../3.1.10_alarm_bell.rst:285
msgid ""
"class threading."
"Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)"
msgstr ""
"class threading."
"Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)"

#: ../3.1.10_alarm_bell.rst:287
msgid ""
"Among the construction methods, the principal parameter is **target**, we "
"need to assign a callable object (here are the functions **ledWork** and "
"**BuzzWork**) to **target**."
msgstr ""
"構築メソッドの中で、主要なパラメーターは**ターゲット**であり、呼び出し可能な"
"オブジェクト（ここでは関数**ledWork**と**BuzzWork**）を**ターゲット**に割り"
"当てる必要がある。"

#: ../3.1.10_alarm_bell.rst:291
msgid ""
"Next **start()** is called to start the thread object, ex., tBuzz.start() "
"is used to start the newly installed tBuzz thread."
msgstr ""
"次に、スレッドオブジェクトを開始するために**start（）**が呼び出される。たと"
"えば、tBuzz.start（）は、新しくインストールされたtBuzzスレッドを開始するため"
"に使用される。"

#: ../3.1.10_alarm_bell.rst:325
msgid "**Phenomenon Picture**"
msgstr "**現象画像**"
