# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 18:20+0800\n"
"PO-Revision-Date: 2021-05-27 17:01+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.3\n"

#: ../1.1.5_4-Digit_7-segment_display.rst:2
msgid "1.1.5 4-Digit 7-Segment Display"
msgstr "1.1.5 4桁7セグメントディスプレイ"

#: ../1.1.5_4-Digit_7-segment_display.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../1.1.5_4-Digit_7-segment_display.rst:7
msgid "Next, follow me to try to control the 4-digit 7-segment display."
msgstr "次に、4桁7セグメントディスプレイを制御してみてください。"

#: ../1.1.5_4-Digit_7-segment_display.rst:10
msgid "Components"
msgstr "部品"

#: ../1.1.5_4-Digit_7-segment_display.rst:16
msgid "Principle"
msgstr "原理"

#: ../1.1.5_4-Digit_7-segment_display.rst:18
msgid "**4-Digit 7-Segment Display**"
msgstr "**4桁7セグメントディスプレイ**"

#: ../1.1.5_4-Digit_7-segment_display.rst:20
msgid ""
"4-Digit 7-segment display consists of four 7- segment displays working "
"together."
msgstr ""
"4桁の7セグメントディスプレイは、連携して動作する4つの7セグメントディスプ"
"レイで構成されている。"

#: ../1.1.5_4-Digit_7-segment_display.rst:25
msgid ""
"The 4-digtal 7-segment display works independently. It uses the "
"principle of human visual persistence to quickly display the characters "
"of each 7-segment in a loop to form continuous strings."
msgstr ""
"4デジタル7セグメントディスプレイは独立して動作する。人間の視覚的持続性の"
"原理を使用して、ループ内の各7セグメントの文字をすばやく表示し、連続した文"
"字列を形成する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:29
msgid ""
"For example, when \"1234\" is displayed on the display, \"1\" is "
"displayed on the first 7-segment, and \"234\" is not displayed. After a "
"period of time, the second 7-segment shows \"2\", the 1st 3th 4th of 7-"
"segment does not show, and so on, the four digital display show in turn. "
"This process is very short (typically 5ms), and because of the optical "
"afterglow effect and the principle of visual residue, we can see four "
"characters at the same time."
msgstr ""
"つまり、ディスプレイに「1234」が表示されている場合、最初の7セグメントに"
"「1」が表示され、「234」は表示されないということである。しばらくすると、2"
"番目の7セグメントに「2」が表示され、7セグメントの1番目、3番目、4番目に表"
"示されなくなり、4つのデジタルディスプレイショーが順番に表示される。このプ"
"ロセスは非常に短く（通常5ms）、光学的残光効果と視覚的残留の原理により、同"
"時に4つの文字を見ることができる。"

#: ../1.1.5_4-Digit_7-segment_display.rst:40
msgid "**Display Codes**"
msgstr "**表示コード**"

#: ../1.1.5_4-Digit_7-segment_display.rst:42
msgid ""
"To help you get to know how 7-segment displays(Common Anode) display "
"Numbers, we have drawn the following table. Numbers are the number 0-F "
"displayed on the 7-segment display; (DP) GFEDCBA refers to the "
"corresponding LED set to 0 or 1, For example, 11000000 means that DP and "
"G are set to 1, while others are set to 0. Therefore, the number 0 is "
"displayed on the 7-segment display, while HEX Code corresponds to "
"hexadecimal number."
msgstr ""
"7セグメントディスプレイ（アノードコモン）がどのように番号を表示するかを知"
"るために、次の表をご参照ください。数字は7セグメントディスプレイに表示され"
"る0〜Fの数字である。（DP）GFEDCBAは、0または1に設定された対応のLEDを指"
"す。たとえば、11000000はDPおよびGが1に設定され、他のLEDが0に設定されるこ"
"とを意味する。したがって、7セグメントディスプレイには0が表示され、HEXコー"
"ドは16進数に対応する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:54
msgid "Schematic Diagram"
msgstr "回路図"

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "T-Board Name"
msgstr "Tボード名"

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "physical"
msgstr "physical"

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "wiringPi"
msgstr "wiringPi"

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "BCM"
msgstr "BCM"

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "GPIO17"
msgstr "GPIO17"

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "Pin 11"
msgstr "Pin 11"

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "0"
msgstr "0"

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "17"
msgstr "17"

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "GPIO27"
msgstr "GPIO27"

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "Pin 13"
msgstr "Pin 13"

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "2"
msgstr "2"

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "27"
msgstr "27"

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "GPIO22"
msgstr "GPIO22"

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "Pin 15"
msgstr "Pin 15"

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "3"
msgstr "3"

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "22"
msgstr "22"

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "SPIMOSI"
msgstr "SPIMOSI"

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "Pin 19"
msgstr "Pin 19"

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "12"
msgstr "12"

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "10"
msgstr "10"

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "GPIO18"
msgstr "GPIO18"

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "Pin 12"
msgstr "Pin 12"

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "1"
msgstr "1"

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "18"
msgstr "18"

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "GPIO23"
msgstr "GPIO23"

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "Pin 16"
msgstr "Pin 16"

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "4"
msgstr "4"

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "23"
msgstr "23"

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "GPIO24"
msgstr "GPIO24"

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "Pin 18"
msgstr "Pin 18"

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "5"
msgstr "5"

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "24"
msgstr "24"

#: ../1.1.5_4-Digit_7-segment_display.rst:71
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../1.1.5_4-Digit_7-segment_display.rst:73
msgid "**Step 1**: Build the circuit."
msgstr "**ステップ1：**回路を作る。"

#: ../1.1.5_4-Digit_7-segment_display.rst:78
msgid "For C Language Users"
msgstr "C言語ユーザー向け"

#: ../1.1.5_4-Digit_7-segment_display.rst:79
#: ../1.1.5_4-Digit_7-segment_display.rst:310
msgid "Step 2: Go to the folder of the code."
msgstr "ステップ2：コードのフォルダーに入る。"

#: ../1.1.5_4-Digit_7-segment_display.rst:85
msgid "Step 3: Compile the code."
msgstr "ステップ3：コードをコンパイルする。"

#: ../1.1.5_4-Digit_7-segment_display.rst:91
msgid "Step 4: Run the executable file."
msgstr "ステップ4：EXEファイルを実行する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:97
msgid ""
"After the code runs, the program takes a count, increasing by 1 per "
"second, and the 4-digit 7-segment display displays the count."
msgstr ""
"コードの実行後、プログラムは1秒間に1つずつ増やすカウントを行い、4桁の7セ"
"グメントディスプレイにそのカウントが表示される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:99
#: ../1.1.5_4-Digit_7-segment_display.rst:324
msgid "**Code**"
msgstr "**コード**"

#: ../1.1.5_4-Digit_7-segment_display.rst:211
#: ../1.1.5_4-Digit_7-segment_display.rst:413
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../1.1.5_4-Digit_7-segment_display.rst:217
#: ../1.1.5_4-Digit_7-segment_display.rst:419
msgid ""
"These four pins control the common anode pins of the four-digit 7-"
"segment displays."
msgstr ""
"これらの4つのピンは、4桁の7セグメントディスプレイのアノードコモンピンを制"
"御する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:223
msgid "A segment code array from 0 to 9 in Hexadecimal (Common anode)."
msgstr "16進数（アノードコモン）の0〜9のセグメントコード配列。"

#: ../1.1.5_4-Digit_7-segment_display.rst:236
#: ../1.1.5_4-Digit_7-segment_display.rst:446
msgid ""
"Select the place of the value. there is only one place that should be "
"enable each time. The enabled place will be written high."
msgstr ""
"値の場所を選択する。毎回有効な場所は1つだけである。有効な場所はhighに書き"
"込まれる。"

#: ../1.1.5_4-Digit_7-segment_display.rst:261
msgid ""
"The functionis used to set the number displayed on the 4-digit 7-segment "
"display."
msgstr ""
"この機能を使用して、4桁の7セグメントディスプレイに表示される番号を設定す"
"る。"

#: ../1.1.5_4-Digit_7-segment_display.rst:263
msgid ""
"``clearDisplay()``：write in 11111111 to turn off these eight LEDs on 7-"
"segment display so as to clear the displayed content."
msgstr ""
"``clearDisplay（）``：11111111に書き込み、7セグメントディスプレイ上のこれ"
"ら8つのLEDをオフにして、表示されたコンテンツを消去する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:264
msgid "``pickDigit(0)``：pick the fourth 7-segment display."
msgstr "``pickDigit（0）``：4番目の7セグメントディスプレイを選択する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:265
msgid ""
"``hc595_shift(number[counter%10])``：the number in the single digit of "
"counter will display on the forth segment."
msgstr ""
"``hc595_shift（number [counter％10]）``：カウンターの1桁の数字が4番目のセ"
"グメントに表示される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:271
msgid "This is a system-provided function, the prototype of code is:"
msgstr ""
"これはシステム組み込みの関数であり、コードのプロトタイプは次のとおりであ"
"る："

#: ../1.1.5_4-Digit_7-segment_display.rst:277
msgid ""
"After executing the signal(), once the process receives the "
"corresponding signum (in this case SIGALRM), it immediately pauses the "
"existing task and processes the set function (in this case timer(sig))."
msgstr ""
"signal()を実行した後、プロセスは対応するsignum（ここでSIGALRM）を受信する"
"と、すぐに既存のタスクを一時停止し、設定関数（ここでtimer（sig))を処理す"
"る。"

#: ../1.1.5_4-Digit_7-segment_display.rst:283
msgid "This is also a system-provided function. The code prototype is:"
msgstr "これもシステム組み込み関数である。コードのプロトタイプは："

#: ../1.1.5_4-Digit_7-segment_display.rst:289
msgid "It generates a SIGALRM signal after a certain number of seconds."
msgstr "指定した秒数後にSIGALRMシグナルを生成する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:303
msgid ""
"We use the functions above to implement the timer function. After the "
"``alarm()`` generates the SIGALRM signal, the timer function is called. "
"Add 1 to counter, and the function, ``alarm(1)`` will be repeatedly "
"called after 1 second."
msgstr ""
"上記の関数を使用して、タイマー関数を実装する。``alarm（）``がSIGALRMシグ"
"ナルを生成した後、タイマー関数が呼び出される。カウンターに1を追加すると、"
"1秒後に関数``alarm（1）``が繰り返し呼び出される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:308
msgid "For Python Language Users"
msgstr "Python言語ユーザー向け"

#: ../1.1.5_4-Digit_7-segment_display.rst:316
msgid "Step 3: Run the executable file."
msgstr "ステップ3：EXEファイルを実行する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:322
msgid ""
"After the code runs, the program takes a count, increasing by 1 per "
"second, and the 4 digit display displays the count."
msgstr ""
"コードの実行後、プログラムは1秒ずつ増加するカウントをして、4桁のディスプ"
"レイにカウントが表示される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:425
msgid "A segment code array from 0 to 9 in hexadecimal (common anode)."
msgstr "16進数の0〜9のセグメントコード配列（アノードコモン）。"

#: ../1.1.5_4-Digit_7-segment_display.rst:437
msgid ""
"Write \"1\" for eight times in SDI., so that the eight LEDs on the 7-"
"segment Dispaly will turn off so as to clear the displayed content."
msgstr ""
"SDIに「1」を8回書き込むと、7セグメントディスプレイの8つのLEDが消灯し、表"
"示されたコンテンツが消去される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:469
msgid ""
"The function is used to set the number displayed on the 4-digit 7-"
"segment Dispaly."
msgstr ""
"この機能は、4桁の7セグメントディスプレイに表示される番号を設定するために"
"使用される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:471
msgid ""
"First, start the fourth segment display, write the single-digit number. "
"Then start the third segment display, and type in the tens digit; after "
"that, start the second and the first segment display respectively, and "
"write the hundreds and thousands digits respectively. Because the "
"refreshing speed is very fast, we see a complete four-digit display."
msgstr ""
"まず、4番目のセグメントディスプレイを開始し、1桁の数字を書き込む。次に、3"
"番目のセグメントディスプレイを開始し、10桁の数字を入力する。その後、2番目"
"と1番目のセグメントディスプレイをそれぞれ開始し、それぞれ数百桁と数千桁を"
"書き込む。リフレッシュ速度が非常に速いため、完全な4桁のディスプレイが表示"
"される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:478
msgid ""
"The module, threading is the common threading module in Python，and "
"Timer is the subclass of it. The prototype of code is:"
msgstr ""
"モジュール、スレッドはPythonの一般的なスレッドモジュールであり、タイマー"
"はそのサブクラスである。コードのプロトタイプは次のとおりです："

#: ../1.1.5_4-Digit_7-segment_display.rst:485
msgid ""
"After the interval, the function will be run. Here, the interval is 1.0，"
"and the function is timer(). start () means the Timer will start at this "
"point."
msgstr ""
"間隔の後、関数が実行される。ここでは、間隔は1.0、関数はtimer（）である。"
"start（）は、タイマーがこの時点で開始することを意味する。"

#: ../1.1.5_4-Digit_7-segment_display.rst:498
msgid ""
"After Timer reaches 1.0s, the Timer function is called; add 1 to "
"counter, and the Timer is used again to execute itself repeatedly every "
"second."
msgstr ""
"Timerが1.0秒に達すると、Timer関数が呼び出される。カウンターに1を追加する"
"と、タイマーが再び使用されて、1秒ごとに繰り返し実行される。"

#: ../1.1.5_4-Digit_7-segment_display.rst:502
msgid "Phenomenon Picture"
msgstr "現象画像"
