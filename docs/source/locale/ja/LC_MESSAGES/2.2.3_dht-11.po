# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 18:20+0800\n"
"PO-Revision-Date: 2021-05-28 08:17+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.3\n"

#: ../2.2.3_dht-11.rst:2
msgid "2.2.3 DHT-11"
msgstr "2.2.3 DHT-11"

#: ../2.2.3_dht-11.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../2.2.3_dht-11.rst:7
msgid ""
"The digital temperature and humidity sensor DHT11 is a composite sensor "
"that contains a calibrated digital signal output of temperature and "
"humidity. The technology of a dedicated digital modules collection and "
"the technology of the temperature and humidity sensing are applied to "
"ensure that the product has high reliability and excellent stability."
msgstr ""
"デジタル温湿度センサーDHT11は、温度と湿度の校正済みデジタル信号出力を含む"
"複合センサーである。専用のデジタルモジュールコレクションの技術と温湿度検"
"知の技術を適用して、製品の高い信頼性と優れた安定性を確保している。"

#: ../2.2.3_dht-11.rst:13
msgid ""
"The sensors include a wet element resistive sensor and a NTC temperature "
"sensor and they are connected to a high performance 8-bit "
"microcontroller."
msgstr ""
"センサーには、湿式素子抵抗センサーとNTC温度センサーが含まれており、高性能"
"の8ビットマイクロコントローラーに接続されている。"

#: ../2.2.3_dht-11.rst:18
msgid "Components"
msgstr "部品"

#: ../2.2.3_dht-11.rst:24
msgid "Principle"
msgstr "原理"

#: ../2.2.3_dht-11.rst:26
msgid ""
"The DHT11 is a basic, ultra low-cost digital temperature and humidity "
"sensor. It uses a capacitive humidity sensor and a thermistor to measure "
"the surrounding air, and spits out a digital signal on the data pin (no "
"analog input pins are needed)."
msgstr ""
"DHT11は基本的な超低コストのデジタル温湿度センサーである。容量性湿度セン"
"サーとサーミスタを使用して周囲の空気を測定し、データピンにデジタル信号を"
"出力する（アナログ入力ピンは不要）。"

#: ../2.2.3_dht-11.rst:34
msgid ""
"Only three pins are available: VCC, GND, and DATA. The communication "
"process begins with the DATA line sending start signals to DHT11, and "
"DHT11 receives the signals and returns an answer signal. Then the host "
"receives the answer signal and begins to receive 40-bit humiture data (8-"
"bit humidity integer + 8-bit humidity decimal + 8-bit temperature "
"integer + 8-bit temperature decimal + 8-bit checksum). For more "
"information, please refer to DHT11 datasheet."
msgstr ""
"VCC、GND、とDATAの三つのピンのみが利用できる。通信プロセスは開始信号を"
"DHT11に送信するDATAラインから始まり、DHT11は信号を受信して応答信号を返"
"す。次に、ホストは応答信号を受信し、40ビットの湿度データ（8ビット湿度整数"
"+ 8ビット湿度10進数+ 8ビット温度整数+ 8ビット温度10進数+ 8ビットチェック"
"サム）の受信を開始する。詳細については、DHT11データシートを参照してくださ"
"い。"

#: ../2.2.3_dht-11.rst:43
msgid "Schematic Diagram"
msgstr "回路図"

#: ../2.2.3_dht-11.rst:49
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../2.2.3_dht-11.rst:51
msgid "**Step 1:** Build the circuit."
msgstr "**ステップ1：**回路を作る。"

#: ../2.2.3_dht-11.rst:57
msgid "For C Language Users"
msgstr "C言語ユーザー向け"

#: ../2.2.3_dht-11.rst:59 ../2.2.3_dht-11.rst:266
msgid "**Step 2:** Go to the folder of the code."
msgstr "**ステップ2：**コードのフォルダーに入る。"

#: ../2.2.3_dht-11.rst:65
msgid "**Step 3:** Compile the code."
msgstr "**ステップ3：**コードをコンパイルする。"

#: ../2.2.3_dht-11.rst:71
msgid "**Step 4:** Run the executable file."
msgstr "**ステップ4：**EXEファイルを実行する。"

#: ../2.2.3_dht-11.rst:77 ../2.2.3_dht-11.rst:278
msgid ""
"After the code runs, the program will print the temperature and humidity "
"detected by DHT11 on the computer screen."
msgstr ""
"コードの実行後、プログラムはDHT11によって検出された温度と湿度をコンピュー"
"ター画面にプリントする。"

#: ../2.2.3_dht-11.rst:80 ../2.2.3_dht-11.rst:281
msgid "**Code**"
msgstr "**コード**"

#: ../2.2.3_dht-11.rst:154 ../2.2.3_dht-11.rst:409
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../2.2.3_dht-11.rst:167
msgid "This function is used to realize the function of DHT11."
msgstr "この機能はDHT11の機能を実現するために使用される。"

#: ../2.2.3_dht-11.rst:169
msgid "It generally can be divided into 3 parts:"
msgstr "通常、次の3つの部分に分けることができる："

#: ../2.2.3_dht-11.rst:171
msgid "prepare to read the pin:"
msgstr "ピンを読む準備ができた："

#: ../2.2.3_dht-11.rst:185
msgid "Its communication flow is determined by work timing."
msgstr "その通信フローは、作業のタイミングによって決まる。"

#: ../2.2.3_dht-11.rst:190
msgid ""
"When DHT11 starts up, MCU will send a low level signal and then keep the "
"signal at high level for 40us. After that, the detection of the "
"condition of external environment will start."
msgstr ""
"DHT11が起動すると、MCUは低レベルの信号を送信し、40usの間信号を高レベルに"
"保つ。その後、外部環境の状態の検出が開始される。"

#: ../2.2.3_dht-11.rst:194
msgid "read data:"
msgstr "データの読み取り："

#: ../2.2.3_dht-11.rst:220
msgid ""
"The loop stores the detected data in the dht11_dat[] array. DHT11 "
"transmits data of 40 bits at a time. The first 16 bits are related to "
"humidity, the middle 16 bits are related to temperature, and the last "
"eight bits are used for verification. The data format is:"
msgstr ""
"ループは検出されたデータをdht11_dat []配列に保存する。DHT11は一度に40ビッ"
"トのデータを転送する。最初の16ビットは湿度に関連し、中央の16ビットは温度"
"に関連し、最後の8ビットは検証に使用される。データ形式は次のとおりである："

#: ../2.2.3_dht-11.rst:225
msgid ""
"**8bit humidity integer data** + **8bit humidity decimal data** + **8bit "
"temperature integer data** + **8bit temperature decimal data** + **8bit "
"check bit**."
msgstr ""
"**8ビット湿度整数データ**+**8ビット湿度10進データ**+**8ビット温度整数デー"
"タ**+**8ビット温度10進データ**+**8ビットチェックビット**。"

#: ../2.2.3_dht-11.rst:229
msgid "Print Humidity & Temperature."
msgstr "湿度と温度をプリントする。"

#: ../2.2.3_dht-11.rst:242
msgid ""
"When the data storage is up to 40 bits, check the validity of the data "
"through the **check bit (dht11_dat[4])**, and then print the temperature "
"and humidity."
msgstr ""
"データストレージが最大40ビットの場合、**check bit (dht11_dat[4])**を通じ"
"てデータの有効性をチェックし、温度と湿度をプリントする。"

#: ../2.2.3_dht-11.rst:246
msgid ""
"For example, if the received data is 00101011(8-bit value of humidity "
"integer) 00000000 (8-bit value of humidity decimal) 00111100 (8-bit "
"value of temperature integer) 00000000 (8-bit value of temperature "
"decimal) 01100111 (check bit)"
msgstr ""
"たとえば、受信データが00101011（湿度整数の8ビット値）00000000（湿度10進数"
"の8ビット値）00111100（温度整数の8ビット値）00000000（温度10進数の8ビット"
"値）01100111（チェックビット）の場合、"

#: ../2.2.3_dht-11.rst:251 ../2.2.3_dht-11.rst:452
msgid "**Calculation:**"
msgstr "**計算：**"

#: ../2.2.3_dht-11.rst:253 ../2.2.3_dht-11.rst:454
msgid "00101011+00000000+00111100+00000000=01100111."
msgstr "00101011+00000000+00111100+00000000=01100111."

#: ../2.2.3_dht-11.rst:255
msgid ""
"The final result is equal to the check bit data, then the received data "
"is correct:"
msgstr "最終結果はチェックビットデータに等しく、受信データは正しいである："

#: ../2.2.3_dht-11.rst:258
msgid "Humidity =43%，Temperature =60*C."
msgstr "湿度= 43％、温度= 60 * C。"

#: ../2.2.3_dht-11.rst:260
msgid ""
"If it is not equal to the check bit data, the data transmission is not "
"normal and the data is received again."
msgstr ""
"チェックビットデータと等しくない場合、データ送信は正常ではなく、データが"
"再度受信される。"

#: ../2.2.3_dht-11.rst:264
msgid "For Python Language Users"
msgstr "Python言語ユーザー向け"

#: ../2.2.3_dht-11.rst:272
msgid "**Step 3:** Run the executable file."
msgstr "**ステップ3：**EXEファイルを実行する。"

#: ../2.2.3_dht-11.rst:425
msgid ""
"This function is used to implement the functions of DHT11. It stores the "
"detected data in the the_bytes[] array. DHT11 transmits data of 40 bits "
"at a time. The first 16 bits are related to humidity, the middle 16 bits "
"are related to temperature, and the last eight bits are used for "
"verification. The data format is:"
msgstr ""
"この関数はDHT11の関数を実装するために使用される。それは検出されたデータを"
"the_bytes []配列に保存する。DHT11は一度に40ビットのデータを点灯する。最初"
"の16ビットは湿度に関連し、中央の16ビットは温度に関連し、最後の8ビットは検"
"証に使用される。データ形式は次のとおりである："

#: ../2.2.3_dht-11.rst:431
msgid ""
"**8bit humidity integer data** +\\ **8bit humidity decimal data** +\\ "
"**8bit temperature integer data** + **8bit temperature decimal data** + "
"**8bit check bit**."
msgstr ""
"**8ビット湿度整数データ**+\\**8ビット湿度10進データ**+\\**8ビット温度整数"
"データ**+**8ビット温度10進データ**+**8ビットチェックビット**。"

#: ../2.2.3_dht-11.rst:435
msgid ""
"When the validity is detected via the check bit, the function returns "
"two results: 1. error; 2. humidity and temperature."
msgstr ""
"チェックビットを介して有効性が検出されると、関数は2つの結果を返す：1. エ"
"ラー; 2.湿度と温度。"

#: ../2.2.3_dht-11.rst:447
msgid ""
"For example, if the received date is 00101011(8-bit value of humidity "
"integer) 00000000 (8-bit value of humidity decimal) 00111100 (8-bit "
"value of temperature integer) 00000000 (8-bit value of temperature "
"decimal) 01100111 (check bit)"
msgstr ""
"たとえば、受信した日付が00101011（湿度整数の8ビット値）00000000（湿度10進"
"数の8ビット値）00111100（温度整数の8ビット値）00000000（温度10進数の8ビッ"
"ト値）01100111（チェックビット）の場合、"

#: ../2.2.3_dht-11.rst:456
msgid ""
"If the final result is equal to the check bit data, the data "
"transmission is abnormal: return False."
msgstr ""
"最終結果がチェックビットデータと等しい場合、データ送信は異常である：False"
"を返す。"

#: ../2.2.3_dht-11.rst:459
msgid ""
"If the final result is equal to the check bit data, the received data is "
"correct, then there will return the_bytes[0] and the_bytes[2] and output "
"“Humidity =43%，Temperature =60C”."
msgstr ""
"最終結果がチェックビットデータと等しく、受信データは正しい場合、"
"the_bytes [0]とthe_bytes [2]が返され、「Humidity = 43％、Temperature= "
"60C」が出力される。"

#: ../2.2.3_dht-11.rst:464
msgid "Phenomenon Picture"
msgstr "現象画像"
