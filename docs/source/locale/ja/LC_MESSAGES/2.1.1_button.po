# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 18:20+0800\n"
"PO-Revision-Date: 2021-05-27 19:42+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.3\n"

#: ../2.1.1_button.rst:2
msgid "2.1.1 Button"
msgstr "2.1.1 ボタン"

#: ../2.1.1_button.rst:5
msgid "Introduction"
msgstr "前書き"

#: ../2.1.1_button.rst:7
msgid ""
"In this lesson, we will learn how to turn on or off the LED by using a button."
msgstr "このレッスンでは、LEDをボタンでオンまたはオフにする方法を学習する。"

#: ../2.1.1_button.rst:11
msgid "Components"
msgstr "部品"

#: ../2.1.1_button.rst:17
msgid "Principle"
msgstr "原理"

#: ../2.1.1_button.rst:19
msgid "**Button**"
msgstr "**ボタン**"

#: ../2.1.1_button.rst:22
msgid ""
"Button is a common component used to control electronic devices. It is usually "
"used as switch to connect or break circuits. Although buttons come in a variety "
"of sizes and shapes, the one used here is a 6mm mini-button as shown in the "
"following pictures."
msgstr ""
"ボタンは電子デバイスを制御するために使用される一般的な部品である。通常、回路を接"
"続または遮断するためのスイッチとして使用される。ボタンにはさまざまなサイズと形状"
"があるが、ここで使用するものは、次の図に示すように6mmのミニボタンである。"

#: ../2.1.1_button.rst:27
msgid ""
"Two pins on the left are connected, and the one on the right is similar to the "
"left, which is shown below:"
msgstr ""
"左側の2つのピンが接続されており、右側の方は左側と同じである。以下を参照してくだ"
"さい："

#: ../2.1.1_button.rst:33
msgid ""
"The symbol shown as below is usually used to represent a button in circuits."
msgstr "以下に示す記号は、通常、回路内のボタンを表すために使用される。"

#: ../2.1.1_button.rst:40
msgid ""
"When the button is pressed, the 4 pins are connected, thus closing the circuit."
msgstr "ボタンを押すと、4つのピンが接続され、回路が閉じる。"

#: ../2.1.1_button.rst:44
msgid "Schematic Diagram"
msgstr "回路図"

#: ../2.1.1_button.rst:46
msgid ""
"Use a normally open button as the input of Raspberry Pi, the connection is "
"shown in the schematic diagram below. When the button is pressed, the GPIO18 "
"will turn into low level (0V). We can detect the state of the GPIO18 through "
"programming. That is, if the GPIO18 turns into low level, it means the button "
"is pressed. You can run the corresponding code when the button is pressed, and "
"then the LED will light up."
msgstr ""
"Raspberry Piの入力として常開ボタンを使用し、接続は下の概略図に示されている。ボタ"
"ンを押すと、GPIO18は低レベル（0V）に変わる。プログラミングによってGPIO18の状態を"
"検出できる。つまり、GPIO18が低レベルになった場合、ボタンが押されたことを意味す"
"る。ボタンが押されたときに対応するコードを実行すると、LEDが点灯する。"

#: ../2.1.1_button.rst:54
msgid "The longer pin of the LED is the anode and the shorter one is the cathode."
msgstr "LEDの長いピンは陽極で、短い方は陰極である。"

#: ../2.1.1_button.rst:64
msgid "Experimental Procedures"
msgstr "実験手順"

#: ../2.1.1_button.rst:66
msgid "**Step 1**: Build the circuit."
msgstr "**ステップ1：**回路を作る。"

#: ../2.1.1_button.rst:72
msgid "For C Language Users"
msgstr "C言語ユーザー向け"

#: ../2.1.1_button.rst:74 ../2.1.1_button.rst:186
msgid "**Step 2**: Open the code file."
msgstr "**ステップ2：**コードファイルを開く。"

#: ../2.1.1_button.rst:81
msgid "Change directory to the path of the code in this experiment via **cd**."
msgstr "**cd**を使用して、この実験のコードのパスにディレクトリを変更する。"

#: ../2.1.1_button.rst:83
msgid "**Step 3**: Compile the code."
msgstr "**ステップ3：**コードをコンパイルする。"

#: ../2.1.1_button.rst:89
msgid "**Step 4**: Run the executable file."
msgstr "**ステップ4：**EXEファイルを実行する。"

#: ../2.1.1_button.rst:95
msgid ""
"After the code runs, press the button, the LED lights up; otherwise, turns off."
msgstr "コードの実行後、ボタンを押すと、LEDが点灯する。それ以外の場合は消灯する。"

#: ../2.1.1_button.rst:98 ../2.1.1_button.rst:202
msgid "**Code**"
msgstr "**コード**"

#: ../2.1.1_button.rst:135 ../2.1.1_button.rst:264
msgid "**Code Explanation**"
msgstr "**コードの説明**"

#: ../2.1.1_button.rst:141
msgid "Pin GPIO17 in the T_Extension Board is equal to the GPIO0 in the wiringPi."
msgstr "T_ExtensionボードのGPIO17ピンは、wiringPiのGPIO0と同じである。"

#: ../2.1.1_button.rst:148
msgid "ButtonPin is connected to GPIO1."
msgstr "ButtonPinはGPIO1に接続されている。"

#: ../2.1.1_button.rst:154
msgid "Set LedPin as output to assign value to it."
msgstr "LedPinを出力として設定し、値を割り当てる。"

#: ../2.1.1_button.rst:160
msgid "Set ButtonPin as input to read the value of ButtonPin."
msgstr "ButtonPinを入力として設定し、ButtonPinの値を読み取る。"

#: ../2.1.1_button.rst:179
msgid ""
"if (digitalRead (ButtonPin) == 0: check whether the button has been pressed. "
"Execute digitalWrite(LedPin, LOW) when button is pressed to light up LED."
msgstr ""
"if（digitalRead（ButtonPin）== 0：ボタンが押されたかどうかを確認してください。ボ"
"タンを押してLEDを点灯させると、digitalWrite（LedPin、LOW）を実行してください。"

#: ../2.1.1_button.rst:184
msgid "For Python Language Users"
msgstr "Python言語ユーザー向け"

#: ../2.1.1_button.rst:192
msgid "**Step 3**: Run the code."
msgstr "**ステップ3：**コードを実行する。"

#: ../2.1.1_button.rst:198
msgid ""
"Now, press the button, and the LED will light up; press the button again, and "
"the LED will go out. At the same time, the state of the LED will be printed on "
"the screen."
msgstr ""
"それから、ボタンを押すと、LEDが点灯する。もう一度ボタンを押すと、LEDが消灯する。"
"同時に、LEDの状態が画面にプリントされる。"

#: ../2.1.1_button.rst:270
msgid "Set GPIO17 as LED pin"
msgstr "GPIO17をLEDピンとして設定する"

#: ../2.1.1_button.rst:276
msgid "Set GPIO18 as button pin"
msgstr "GPIO18をボタンピンとして設定する"

#: ../2.1.1_button.rst:282
msgid ""
"Set up a falling detect on BtnPin, and then when the value of BtnPin changes "
"from a high level to a low level, it means that the button is pressed. The next "
"step is calling the function, swled."
msgstr ""
"BtnPinで立ち下がり検出を設定してから、BtnPinの値が高レベルから低レベルに変わる"
"と、ボタンが押されたことを意味する。次のステップは、関数swledを呼び出す。"

#: ../2.1.1_button.rst:294
msgid ""
"Define a callback function as button callback. When the button is pressed at "
"the first time，and the condition, not Led_status is false, GPIO.output() "
"function is called to light up the LED. As the button is pressed once again, "
"the state of LED will be converted from false to true, thus the LED will turn "
"off."
msgstr ""
"ボタンコールバックとしてコールバック関数を定義する。ボタンが初めて押され、not "
"Led_status条件がfalseの場合、GPIO.output（）関数を呼び出してLEDを点灯させる。ボ"
"タンをもう一度押すと、LEDの状態がfalseからtrueに変換され、LEDが消灯する。"

#: ../2.1.1_button.rst:301
msgid "Phenomenon Picture"
msgstr "現象画像"
