# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Davinci
# Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Davinci Kit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 18:20+0800\n"
"PO-Revision-Date: 2021-05-27 09:28+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.3\n"

#: ../3.1.10_alarm_bell.rst:2
msgid "3.1.10 Alarm Bell"
msgstr "3.1.10 Alarmglocke"

#: ../3.1.10_alarm_bell.rst:5
msgid "**Introduction**"
msgstr "**Einführung**"

#: ../3.1.10_alarm_bell.rst:7
msgid ""
"In this course, we will make a manual alarm device. You can replace the "
"toggle switch with a thermistor or a photosensitive sensor to make a "
"temperature alarm or a light alarm."
msgstr ""
"In diesem Kurs erstellen wir ein manuelles Alarmgerät. Sie können den "
"Kippschalter durch einen Thermistor oder einen lichtempfindlichen Sensor "
"ersetzen, um einen Temperaturalarm oder einen Lichtalarm auszulösen."

#: ../3.1.10_alarm_bell.rst:12
msgid "**Components**"
msgstr "**Komponenten**"

#: ../3.1.10_alarm_bell.rst:18
msgid "**Schematic Diagram**"
msgstr "**Schematische Darstellung**"

#: ../3.1.10_alarm_bell.rst:21
msgid "T-Board Name"
msgstr "T-Karte Name"

#: ../3.1.10_alarm_bell.rst:21
msgid "physical"
msgstr "physisch"

#: ../3.1.10_alarm_bell.rst:21
msgid "wiringPi"
msgstr "wiringPi"

#: ../3.1.10_alarm_bell.rst:21
msgid "BCM"
msgstr "BCM"

#: ../3.1.10_alarm_bell.rst:22
msgid "GPIO17"
msgstr "GPIO17"

#: ../3.1.10_alarm_bell.rst:22
msgid "Pin 11"
msgstr "Pin 11"

#: ../3.1.10_alarm_bell.rst:22
msgid "0"
msgstr "0"

#: ../3.1.10_alarm_bell.rst:22
msgid "17"
msgstr "17"

#: ../3.1.10_alarm_bell.rst:23
msgid "GPIO18"
msgstr "GPIO18"

#: ../3.1.10_alarm_bell.rst:23
msgid "Pin 12"
msgstr "Pin 12"

#: ../3.1.10_alarm_bell.rst:23
msgid "1"
msgstr "1"

#: ../3.1.10_alarm_bell.rst:23
msgid "18"
msgstr "18"

#: ../3.1.10_alarm_bell.rst:24
msgid "GPIO27"
msgstr "GPIO27"

#: ../3.1.10_alarm_bell.rst:24
msgid "Pin 13"
msgstr "Pin 13"

#: ../3.1.10_alarm_bell.rst:24
msgid "2"
msgstr "2"

#: ../3.1.10_alarm_bell.rst:24
msgid "27"
msgstr "27"

#: ../3.1.10_alarm_bell.rst:25
msgid "GPIO22"
msgstr "GPIO22"

#: ../3.1.10_alarm_bell.rst:25
msgid "Pin 15"
msgstr "Pin 15"

#: ../3.1.10_alarm_bell.rst:25
msgid "3"
msgstr "3"

#: ../3.1.10_alarm_bell.rst:25
msgid "22"
msgstr "22"

#: ../3.1.10_alarm_bell.rst:32
msgid "**Experimental Procedures**"
msgstr "**Experimentelle Verfahren**"

#: ../3.1.10_alarm_bell.rst:34
msgid "**Step 1**: Build the circuit."
msgstr "**Schritt 1:** Bauen Sie die Schaltung auf."

msgid "Alarm Bell_bb"
msgstr "Alarm Bell_bb"

#: ../3.1.10_alarm_bell.rst:42
msgid "**For C Language Users**"
msgstr "**Für Benutzer in C-Sprache**"

#: ../3.1.10_alarm_bell.rst:44
msgid "**Step 2**: Change directory."
msgstr "**Schritt 2:** Verzeichnis wechseln."

#: ../3.1.10_alarm_bell.rst:50
msgid "**Step 3**: Compile."
msgstr "**Schritt 3:** Kompilieren."

#: ../3.1.10_alarm_bell.rst:56
msgid "**Step 4**: Run."
msgstr "**Schritt 4:** Ausführen."

#: ../3.1.10_alarm_bell.rst:62 ../3.1.10_alarm_bell.rst:215
msgid ""
"After the program starts, the toggle switch will be toggled to the right, "
"and the buzzer will give out alarm sounds. At the same time, the red and "
"green LEDs will flash at a certain frequency."
msgstr ""
"Nach dem Start des Programms wird der Kippschalter nach rechts umgeschaltet "
"und der Summer gibt Alarmtöne aus. Gleichzeitig blinken die roten und "
"grünen LEDs mit einer bestimmten Frequenz."

#: ../3.1.10_alarm_bell.rst:66 ../3.1.10_alarm_bell.rst:219
msgid "**Code Explanation**"
msgstr "**Kode Erklärung**"

#: ../3.1.10_alarm_bell.rst:72
msgid ""
"In this code, you'll use a new library, pthread.h, which is a set of common "
"thread libraries and can realize multithreading. We add the **-lpthread** "
"parameter at compile time for the independent working of the LED and the "
"buzzer."
msgstr ""
"In dieser Kode verwenden Sie eine neue Bibliothek, pthread.h, die aus einer "
"Reihe allgemeiner Thread-Bibliotheken besteht und Multithreading "
"realisieren kann. Wir fügen den Parameter **-lpthread** zur "
"Kompilierungszeit hinzu, damit die LED und der Summer unabhängig "
"voneinander arbeiten können."

#: ../3.1.10_alarm_bell.rst:94 ../3.1.10_alarm_bell.rst:241
msgid ""
"The function ledWork() helps to set the working state of these 2 LEDs: it "
"keeps the green LED lighting up for 0.5s and then turns off; similarly, "
"keeps the red LED lighting up for 0.5s and then turns off."
msgstr ""
"Die Funktion ledWork() hilft beim Einstellen des Arbeitszustands dieser "
"beiden LEDs: Sie leuchtet die grüne LED 0,5 Sekunden lang auf und erlischt "
"dann. In ähnlicher Weise leuchtet die rote LED 0,5 Sekunden lang auf und "
"erlischt dann."

#: ../3.1.10_alarm_bell.rst:115 ../3.1.10_alarm_bell.rst:257
msgid ""
"The function buzzWork() is used to set the working state of the buzzer. "
"Here we set the frequency as between 130 and 800, to accumulate or decay at "
"an interval of 20."
msgstr ""
"Mit der Funktion summWork() wird der Arbeitszustand des Summers "
"eingestellt. Hier stellen wir die Frequenz zwischen 130 und 800 ein, um sie "
"in einem Intervall von 20 zu akkumulieren oder abzunehmen."

#: ../3.1.10_alarm_bell.rst:133 ../3.1.10_alarm_bell.rst:272
msgid "In the function on():"
msgstr "In der Funktion on ():"

#: ../3.1.10_alarm_bell.rst:135 ../3.1.10_alarm_bell.rst:274
msgid "Define the mark “flag=1”, indicating the ending of the control thread."
msgstr ""
"Definieren Sie die Markierung \"flag = 1\", die das Ende des "
"Kontrollthreads angibt."

#: ../3.1.10_alarm_bell.rst:138
msgid "Create a software-controlled tone pin **BeepPin**."
msgstr "Erstellen Sie einen softwaregesteuerten Ton-Pin **BeepPin**."

#: ../3.1.10_alarm_bell.rst:140
msgid ""
"Create two separate threads so that the LED and the buzzer can work at the "
"same time."
msgstr ""
"Erstellen Sie zwei separate Threads, damit die LED und der Summer "
"gleichzeitig arbeiten können."

#: ../3.1.10_alarm_bell.rst:143
msgid "**pthread_t tLed:** Declare a thread **tLed**."
msgstr "**pthread_t tLed:** Deklariert einen Thread **tLed**."

#: ../3.1.10_alarm_bell.rst:145
msgid ""
"**pthread_create(&tLed,NULL,ledWork,NULL)：**\\ Create the thread and its "
"prototype is as follows:"
msgstr ""
"**pthread_create(&tLed,NULL,ledWork,NULL):** Erstellen Sie den Thread und "
"sein Prototyp lautet wie folgt:"

#: ../3.1.10_alarm_bell.rst:148
msgid ""
"int pthread_create(pthread_t \\*restrict tidp,const pthread_attr_t "
"\\*restrict_attr,void*（*start_rtn)(void*),void \\*restrict arg);"
msgstr ""
"int pthread_create (pthread_t \\* tidp einschränken, const pthread_attr_t "
"\\* einschränken_attr, void * （* start_rtn) (void *), void \\* arg "
"einschränken);"

#: ../3.1.10_alarm_bell.rst:151
msgid "**Return the Value**"
msgstr "**Geben Sie den Wert zurück**"

#: ../3.1.10_alarm_bell.rst:153
msgid ""
"If successful, return “\\ **0**\\ ”；otherwise, return the **fall number** "
"“\\ **-1**\\ ”."
msgstr ""
"Wenn dies erfolgreich ist, geben Sie “\\ **0**\\ ” zurück. Andernfalls "
"geben Sie **die Fallzahl** “\\ **-1**\\ ” zurück."

#: ../3.1.10_alarm_bell.rst:156
msgid "**Parameter**"
msgstr "**Parameter**"

#: ../3.1.10_alarm_bell.rst:158
msgid "The first parameter is a pointer to the thread identifier."
msgstr "Der erste Parameter ist ein Zeiger auf die Thread-ID."

#: ../3.1.10_alarm_bell.rst:159
msgid "The second one is used to set the thread attribute."
msgstr "Der zweite wird verwendet, um das Thread-Attribut festzulegen."

#: ../3.1.10_alarm_bell.rst:160
msgid "The third one is the starting address of the thread running function."
msgstr "Die dritte ist die Startadresse der Thread-Running-Funktion."

#: ../3.1.10_alarm_bell.rst:161
msgid "The last one is the one that runs the function."
msgstr "Der letzte ist derjenige, der die Funktion ausführt."

#: ../3.1.10_alarm_bell.rst:173 ../3.1.10_alarm_bell.rst:303
msgid ""
"The function Off() defines “flag=0” so as to exit the threads **ledWork** "
"and **BuzzWork** and then turn off the buzzer and the LED."
msgstr ""
"Die Funktion Off() definiert \"flag=0\", um die Threads **ledWork** und "
"**BuzzWork** zu verlassen und dann den Summer und die LED auszuschalten."

#: ../3.1.10_alarm_bell.rst:194 ../3.1.10_alarm_bell.rst:318
msgid ""
"Main() contains the whole process of the program: firstly read the value of "
"the slide switch; if the toggle switch is toggled to the right (the reading "
"is 1), the function on() is called, the buzzer is driven to emit sounds and "
"the the red and the green LEDs blink. Otherwise, the buzzer and the LED "
"don’t work."
msgstr ""
"Main() enthält den gesamten Prozess des Programms: Lesen Sie zuerst den "
"Wert des Schiebeschalters; Wenn der Kippschalter nach rechts umgeschaltet "
"ist (der Messwert ist 1), wird die Funktion on () aufgerufen, der Summer "
"wird zur Ausgabe von Tönen angesteuert und die rote und die grüne LED "
"blinken. Andernfalls funktionieren der Summer und die LED nicht."

#: ../3.1.10_alarm_bell.rst:201
msgid "**For Python Language Users**"
msgstr "**Für Python-Sprachbenutzer**"

#: ../3.1.10_alarm_bell.rst:203
msgid "**Step 2:** Change directory."
msgstr "**Schritt 2:** Verzeichnis wechseln."

#: ../3.1.10_alarm_bell.rst:209
msgid "**Step 3:** Run."
msgstr "**Schritt 3:** Ausführen."

#: ../3.1.10_alarm_bell.rst:225
msgid ""
"Here, we import the **Threading** module and it allows you to do multiple "
"things at once, while normal programs can only execute code from top to "
"bottom. With **Threading** modules, the LED and the buzzer can work "
"separately."
msgstr ""
"Hier importieren wir das **Threading**-Modul und es ermöglicht Ihnen, "
"mehrere Dinge gleichzeitig zu tun, während normale Programme Kode nur von "
"oben nach unten ausführen können. Bei **Threading**-Modulen können die LED "
"und der Summer separat arbeiten."

#: ../3.1.10_alarm_bell.rst:277
msgid "Start the Buzz, and set the duty cycle to 50%."
msgstr "Starten Sie den Buzz und stellen Sie den Arbeitszyklus auf 50% ein."

#: ../3.1.10_alarm_bell.rst:279
msgid ""
"Create **2** separate threads so that the LED and the buzzer can work at "
"the same time."
msgstr ""
"Erstellen Sie **2 **separate Threads, damit die LED und der Summer "
"gleichzeitig arbeiten können."

#: ../3.1.10_alarm_bell.rst:282
msgid ""
"tBuzz = threading.Thread(target=buzzerWork)\\ **：**\\ Create the thread "
"and its prototype is as follows:"
msgstr ""
"tBuzz = threading.Thread (target = buzzerWork) **:**\\  Erstellen Sie den "
"Thread und sein Prototyp lautet wie folgt:"

#: ../3.1.10_alarm_bell.rst:285
msgid ""
"class threading."
"Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)"
msgstr ""
"class threading.Thread (group=None, target=None, name=None, args=(), "
"kwargs={}, *, daemon=None)"

#: ../3.1.10_alarm_bell.rst:287
msgid ""
"Among the construction methods, the principal parameter is **target**, we "
"need to assign a callable object (here are the functions **ledWork** and "
"**BuzzWork**) to **target**."
msgstr ""
"Unter den Konstruktionsmethoden ist der Hauptparameter **target**. Wir "
"müssen dem Ziel ein aufrufbares Objekt zuweisen (hier sind die Funktionen "
"**ledWork** und **BuzzWork**)."

#: ../3.1.10_alarm_bell.rst:291
msgid ""
"Next **start()** is called to start the thread object, ex., tBuzz.start() "
"is used to start the newly installed tBuzz thread."
msgstr ""
"Next **start()** wird aufgerufen, um das Thread-Objekt zu starten. "
"Beispiel: tBuzz.start () wird verwendet, um den neu installierten tBuzz-"
"Thread zu starten."

#: ../3.1.10_alarm_bell.rst:325
msgid "**Phenomenon Picture**"
msgstr "**Phänomen Bild**"
